## needs to be slightly different, issues with tst_dt
rec_final <- recipe(score ~ ., data) %>%
step_mutate(tst_dt = lubridate::mdy_hms(tst_dt)) %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars") %>%
step_novel(all_nominal()) %>%
step_unknown(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_BoxCox(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_dummy(all_nominal(), -has_role("id vars"), one_hot = TRUE) %>%
step_zv(all_predictors())
# Preprocess test data
test_baked <- rec_final %>%
prep() %>%
bake(test)
# Specify final recipe
## needs to be slightly different, issues with tst_dt
rec_final <- recipe(score ~ ., test) %>%
step_mutate(tst_dt = lubridate::mdy_hms(tst_dt)) %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars") %>%
step_novel(all_nominal()) %>%
step_unknown(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_BoxCox(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_dummy(all_nominal(), -has_role("id vars"), one_hot = TRUE) %>%
step_zv(all_predictors())
# Specify final recipe
## needs to be slightly different, issues with tst_dt
rec_final <- recipe(score ~ ., data) %>%
step_mutate(tst_dt = lubridate::mdy_hms(tst_dt)) %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars") %>%
step_novel(all_nominal()) %>%
step_unknown(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_BoxCox(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_dummy(all_nominal(), -has_role("id vars"), one_hot = TRUE) %>%
step_zv(all_predictors())
# Specify final recipe
## needs to be slightly different, issues with tst_dt
rec_final <- recipe(score ~ ., data) %>%
step_mutate(tst_dt = lubridate::mdy_hms(tst_dt)) %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars") %>%
step_novel(all_nominal()) %>%
step_unknown(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_BoxCox(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_dummy(all_nominal(), -has_role("id vars"), one_hot = TRUE) %>%
step_zv(all_predictors())
# Preprocess test data
test_baked <- rec_final %>%
prep() %>%
bake(test)
View(test_baked)
View(test)
library(lubridate)
mdy_hms(test$tst_dt)
# Specify final recipe
## needs to be slightly different, issues with tst_dt
rec_final <- recipe(score ~ ., data) %>%
step_mutate(tst_dt = lubridate::mdy_hms(tst_dt)) %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars") %>%
step_novel(all_nominal()) %>%
step_unknown(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_BoxCox(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_dummy(all_nominal(), -has_role("id vars"), one_hot = TRUE) %>%
step_zv(all_predictors())
# Preprocess test data
test_baked <- rec_final %>%
prep() %>%
bake(test)
rec <- recipe(score ~ ., data) %>%
step_mutate(tst_dt = lubridate::mdy_hms(tst_dt)) %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars") %>%
step_novel(all_nominal()) %>%
step_unknown(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_BoxCox(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_dummy(all_nominal(), -has_role("id vars"), one_hot = TRUE) %>%
step_zv(all_predictors())
# Preprocess data
data_sub_baked <- rec %>%
prep() %>%
bake(data_sub)
rec <- recipe(score ~ ., data) %>%
step_mutate(tst_dt = lubridate::mdy_hm(tst_dt)) %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars") %>%
step_novel(all_nominal()) %>%
step_unknown(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_BoxCox(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_dummy(all_nominal(), -has_role("id vars"), one_hot = TRUE) %>%
step_zv(all_predictors())
# Preprocess data
data_sub_baked <- rec %>%
prep() %>%
bake(data_sub)
# Preprocess test data
test_baked <- rec %>%
prep() %>%
bake(test)
# Preprocess test data
test_baked <- rec_final %>%
prep() %>%
bake(test)
View(test_baked)
# Import joined data file
test <- import(here("data","test_joined.csv"),
setclass = "tbl_df") %>%
select(-tst_dt)
# Preprocess test data
test_baked <- rec_final %>%
prep() %>%
bake(test)
# Import joined data file
test <- import(here("data","test_joined.csv"),
setclass = "tbl_df") %>%
select(-tst_dt)
rec_final <- recipe(score ~ ., data) %>%
#step_mutate(tst_dt = lubridate::mdy_hm(tst_dt)) %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars") %>%
step_novel(all_nominal()) %>%
step_unknown(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_BoxCox(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_dummy(all_nominal(), -has_role("id vars"), one_hot = TRUE) %>%
step_zv(all_predictors())
# Preprocess test data
test_baked <- rec_final %>%
prep() %>%
bake(test)
rlang::last_error()
# Import joined data file
test <- import(here("data","test_joined.csv"),
setclass = "tbl_df")
rec_final <- recipe(score ~ ., data) %>%
step_mutate(tst_dt = lubridate::mdy_hm(tst_dt)) %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars") %>%
step_novel(all_nominal()) %>%
step_unknown(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_BoxCox(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_dummy(all_nominal(), -has_role("id vars"), one_hot = TRUE) %>%
step_zv(all_predictors())
# Preprocess test data
test_baked <- rec_final %>%
prep() %>%
bake(test)
rec_final <- recipe(score ~ ., data) %>%
#step_mutate(tst_dt = lubridate::mdy_hm(tst_dt)) %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars") %>%
step_novel(all_nominal()) %>%
step_unknown(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_BoxCox(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_dummy(all_nominal(), -has_role("id vars"), one_hot = TRUE) %>%
step_zv(all_predictors())
# Preprocess test data
test_baked <- rec_final %>%
prep() %>%
bake(test)
str(test_baked$tst_dt)
# Import joined data file
test <- import(here("data","test_joined.csv"),
setclass = "tbl_df")
# Had to respecify the recipe without mutating the tst_dt variable
rec_final <- recipe(score ~ ., data) %>%
#step_mutate(tst_dt = lubridate::mdy_hm(tst_dt)) %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars") %>%
step_novel(all_nominal()) %>%
step_unknown(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_BoxCox(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_dummy(all_nominal(), -has_role("id vars"), one_hot = TRUE) %>%
step_zv(all_predictors())
# Preprocess test data
test_baked <- rec_final %>%
prep() %>%
bake(test)
# Had to respecify the recipe without mutating the tst_dt variable
rec_final <- recipe(score ~ ., data) %>%
step_mutate(tst_dt = lubridate::mdy(tst_dt)) %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars") %>%
step_novel(all_nominal()) %>%
step_unknown(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_BoxCox(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_dummy(all_nominal(), -has_role("id vars"), one_hot = TRUE) %>%
step_zv(all_predictors())
# Preprocess test data
test_baked <- rec_final %>%
prep() %>%
bake(test)
str(test$tst_dt)
str(data$tst_dt)
# Had to respecify the recipe without mutating the tst_dt variable
rec_final <- recipe(score ~ ., data) %>%
step_mutate(tst_dt = lubridate::mdy_hms(tst_dt)) %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars") %>%
step_novel(all_nominal()) %>%
step_unknown(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_BoxCox(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_dummy(all_nominal(), -has_role("id vars"), one_hot = TRUE) %>%
step_zv(all_predictors())
# Preprocess test data
test_baked <- rec_final %>%
prep() %>%
bake(test)
final_test <- read_csv("data/test.csv",
col_types = cols(.default = col_guess(), calc_admn_cd = col_character()))
# read in free/reduced lunch data and student counts
frl <- import(here("data", "lunch.csv"),
setclass = "tbl_df")  %>%
janitor::clean_names()  %>%
filter(st == "OR")  %>%
select(ncessch, lunch_program, student_count)  %>%
mutate(student_count = replace_na(student_count, 0))  %>%
pivot_wider(names_from  = lunch_program,
values_from = student_count)  %>%
janitor::clean_names()  %>%
mutate(ncessch = as.double(ncessch))
stu_counts <- import("https://github.com/datalorax/ach-gap-variability/raw/master/data/achievement-gaps-geocoded.csv",
setclass = "tbl_df")  %>%
filter(state == "OR" & year == 1718)  %>%
count(ncessch, wt = n)  %>%
mutate(ncessch = as.double(ncessch))
frl <- left_join(frl, stu_counts)
rm(stu_counts)
frl <- frl %>%
mutate(free_lunch_prop    = free_lunch_qualified / n,
reduced_lunch_prop = reduced_price_lunch_qualified / n)  %>%
select(ncessch, ends_with("prop"))
# read in staff data
staff <- import(here("data", "staff.csv"), setclass = "tbl_df")  %>%
janitor::clean_names()  %>%
filter(st == "OR")  %>%
mutate(ncessch = as.double(ncessch)) %>%
select(ncessch, teachers)
# read in school characteristics data
school_chars <- import(here("data", "school_characteristics.csv"), setclass = "tbl_df")  %>%
janitor::clean_names()  %>%
filter(st == "OR")  %>%
mutate(ncessch = as.double(ncessch)) %>%
select(ncessch, titlei_status, nslp_status, virtual)
# read in ethnicity data
eth <- import(file     = here::here("data", "fallmembershipreport_20192020.xlsx"),
sheet    = "School (19-20)",
setclass = "tibble") %>%
janitor::clean_names() %>%
select(attnd_schl_inst_id = attending_school_id,
matches("percent"))
names(eth) <- gsub("x2019_20_percent", "p", names(eth))
# combine our data with frl, staff, school characteristics, and ethnicities
final_test <- final_test %>%
left_join(frl) %>%
left_join(staff) %>%
left_join(school_chars) %>%
left_join(eth)
# remove unneeded dataframes
rm(frl, staff, school_chars, eth)
rec <- recipe(score ~ ., data) %>%
step_mutate(tst_dt = lubridate::mdy_hm(tst_dt)) %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars") %>%
step_novel(all_nominal()) %>%
step_unknown(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_BoxCox(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_dummy(all_nominal(), -has_role("id vars"), one_hot = TRUE) %>%
step_zv(all_predictors())
rec <- recipe(score ~ ., data) %>%
step_mutate(tst_dt = lubridate::mdy_hms(tst_dt)) %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars") %>%
step_novel(all_nominal()) %>%
step_unknown(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_BoxCox(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_dummy(all_nominal(), -has_role("id vars"), one_hot = TRUE) %>%
step_zv(all_predictors())
str(final_test$tst_dt)
final_test_baked <- rec %>%
prep() %>%
bake(test)
# Had to respecify the recipe without mutating the tst_dt variable
rec_final <- recipe(score ~ ., data) %>%
step_mutate(tst_dt = lubridate::mdy_hm(tst_dt)) %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars") %>%
step_novel(all_nominal()) %>%
step_unknown(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_BoxCox(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_dummy(all_nominal(), -has_role("id vars"), one_hot = TRUE) %>%
step_zv(all_predictors())
final_test_baked <- rec+final %>%
prep() %>%
bake(test)
final_test_baked <- rec_final %>%
prep() %>%
bake(test)
rec <- recipe(score ~ ., data) %>%
#step_mutate(tst_dt = lubridate::mdy_hms(tst_dt)) %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars") %>%
step_novel(all_nominal()) %>%
step_unknown(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_BoxCox(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_dummy(all_nominal(), -has_role("id vars"), one_hot = TRUE) %>%
step_zv(all_predictors())
# Import joined data file
test <- import(here("data","test_joined.csv"),
setclass = "tbl_df")
# Preprocess test data
test_baked <- rec %>%
prep() %>%
bake(test)
# Transform preprocessed data into feature matrix
features <- test_baked %>%
select(-score, -contains("id"), -ncessch, -sch_name) %>%
as.matrix()
# Transform preprocessed data into feature matrix
features <- test_baked %>%
select(-contains("id"), -ncessch, -sch_name) %>%
as.matrix()
# Saving the scores as a separate vector
outcome <- test_baked$score
fit_final_xgb <- xgboost(
data = features,
label = outcome,
nrounds = best_numtrees, # number of trees
objective = "reg:squarederror",
early_stopping_rounds = 20,
params = list(eta = best_learnrate2,
max_depth = best_depth,
colsample_bytree = best_colsample)
)
# Preprocess data
data_sub_baked <- rec %>%
prep() %>%
bake(data_sub)
# Transform tst_dt to numeric
#data_sub_baked$tst_dt <- as.numeric(data_sub_baked$tst_dt)
# Transform preprocessed data into feature matrix
features <- data_sub_baked %>%
select(-score, -contains("id"), -ncessch, -sch_name) %>%
as.matrix()
# Saving the scores as a separate vector
outcome <- data_sub_baked$score
fit_final_xgb <- xgboost(
data = features,
label = outcome,
nrounds = best_numtrees, # number of trees
objective = "reg:squarederror",
early_stopping_rounds = 20,
params = list(eta = best_learnrate2,
max_depth = best_depth,
colsample_bytree = best_colsample)
)
# Import joined data file
test <- import(here("data","test_joined.csv"),
setclass = "tbl_df")
# Preprocess test data
test_baked <- rec %>%
prep() %>%
bake(test)
# Transform preprocessed data into feature matrix
features <- test_baked %>%
select(-contains("id"), -ncessch, -sch_name) %>%
as.matrix()
# Transform preprocessed data into feature matrix
test_data <- test_baked %>%
select(-contains("id"), -ncessch, -sch_name) %>%
as.matrix()
pred <- predict(fit_final_xgb, test_data)
pred
.75*2
# Import joined data file
data <- import(here("data","data.csv"),
setclass = "tbl_df")
# Subset data
data_sub <- data %>%
sample_frac(.2)
# Split data
splits <- initial_split(data_sub, strata = "score")
train <- training(splits)
test <- testing(splits)
# Import joined data file
data <- import(here("data","data.csv"),
setclass = "tbl_df")
# Subset data
data_sub <- data %>%
sample_frac(.1)
# Split data
splits <- initial_split(data_sub, strata = "score")
train <- training(splits)
test <- testing(splits)
rec <- recipe(score ~ ., train) %>%
step_mutate(tst_dt = lubridate::mdy_hms(tst_dt)) %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars") %>%
step_novel(all_nominal()) %>%
step_unknown(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_BoxCox(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_dummy(all_nominal(), -has_role("id vars"), one_hot = TRUE) %>%
step_zv(all_predictors())
# Preprocess data
train_baked <- rec %>%
prep() %>%
bake(train)
rec <- recipe(score ~ ., train) %>%
step_mutate(tst_dt = lubridate::mdy_hm(tst_dt)) %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars") %>%
step_novel(all_nominal()) %>%
step_unknown(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_BoxCox(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_dummy(all_nominal(), -has_role("id vars"), one_hot = TRUE) %>%
step_zv(all_predictors())
# Preprocess data
train_baked <- rec %>%
prep() %>%
bake(train)
# Transform preprocessed data into feature matrix
features <- train_baked %>%
select(-score, -contains("id"), -ncessch, -sch_name) %>%
as.matrix()
str(features)
# Transform tst_dt to numeric
train_baked$tst_dt <- as.numeric(data_sub_baked$tst_dt)
# Transform tst_dt to numeric
train_baked$tst_dt <- as.numeric(train_baked$tst_dt)
# Transform preprocessed data into feature matrix
features <- train_baked %>%
select(-score, -contains("id"), -ncessch, -sch_name) %>%
as.matrix()
# Saving the scores as a separate vector
outcome <- train_baked$score
fit_final_xgb <- xgboost(
data = features,
label = outcome,
nrounds = best_numtrees, # number of trees
objective = "reg:squarederror",
early_stopping_rounds = 20,
params = list(eta = best_learnrate2,
max_depth = best_depth,
colsample_bytree = best_colsample)
)
# Preprocess data
test_baked <- rec %>%
prep() %>%
bake(test)
# Transform tst_dt to numeric
test_baked$tst_dt <- as.numeric(test_baked$tst_dt)
# Transform preprocessed data into feature matrix
features <- test_baked %>%
select(-score, -contains("id"), -ncessch, -sch_name) %>%
as.matrix()
# Saving the scores as a separate vector
outcome <- test_baked$score
# Transform preprocessed data into feature matrix
test_data <- test_baked %>%
select(-score, -contains("id"), -ncessch, -sch_name) %>%
as.matrix()
predictions <- predict(fit_final_xgb, test_data)
# Saving the scores as a separate vector
test_outcome <- test_baked$score
lm(test_outcome ~ predictions)
yup <- lm(test_outcome ~ predictions)
yup
summary(yup)
test_outcome - predictions
?rmse
pred_tbl <- tiblle(predictions, test_outcome)
pred_tbl <- tibble(predictions, test_outcome)
View(pred_tbl)
yardstick::rmse(pred_tbl, predictions, test_outcome)
